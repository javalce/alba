[tool.poetry]
name = "alba"
version = "0.1.0"
description = ""
authors = ["pablovazquezg <pablovazquezg@gmail.com>"]
readme = "README.md"
packages = [
    { include = "alba", from = "src" },
    { include = "alba_cli", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.11"
langchain = "^0.1.13"
pymilvus = "^2.4.0"
milvus-model = "^0.1.0"
pymupdf = "^1.24.0"
ollama = "^0.1.8"
tqdm = "^4.66.2"
torch = "^2.2.2"
tenacity = "^8.2.3"
openai = "^1.23.1"
pandas = "^2.2.2"
openpyxl = "^3.1.2"
transformers = "^4.41.1"
spacy = "^3.7.4"
fpdf = "^1.7.2"
pypdf2 = "^3.0.1"
camelot-py = "^0.11.0"
opencv-python = "^4.10.0.82"
ghostscript = "^0.7"
pydantic-settings = "^2.3.4"
fastapi = { extras = ["standard"], version = "^0.111.1" }
dependency-injector2 = "^4.41.1"
sqlalchemy = "^2.0.31"
sqlalchemy-toolkit = "^0.1.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.5.2"
black = "^24.4.2"

[tool.poetry.scripts]
alba = "alba_cli.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
